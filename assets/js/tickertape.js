// Generated by CoffeeScript 1.6.3
(function() {
  var FADE_TIME, Game, PlayerSetup, Ticker, TickerTape, days, hours, keyToStr, minutes, months, seconds, strToKey, weeks, years, _;

  Game = (function() {
    function Game() {}

    return Game;

  })();

  document.body.onload = function() {
    return (new Ticker()).run();
  };

  PlayerSetup = (function() {
    function PlayerSetup(game) {}

    return PlayerSetup;

  })();

  FADE_TIME = 1.2 * 1000;

  Ticker = (function() {
    function Ticker() {
      this.game = new Game();
      this.tape = new TickerTape(this.game);
      this.playerSetup = new PlayerSetup(this.game);
    }

    Ticker.prototype.run = function() {
      var _tape;
      _tape = this.tape;
      return this.runIntro(function() {
        return _tape.run();
      });
    };

    Ticker.prototype.runIntro = function(after) {
      var intro;
      intro = _.element({
        id: 'intro-logo',
        type: 'div',
        parent: document.body,
        children: [
          _.element({
            type: 'div',
            classList: ['spinner']
          }), _.element({
            type: 'h1',
            innerHTML: 'Ticker'
          })
        ],
        classList: ['hide']
      });
      return $(intro).fadeIn(FADE_TIME / 2).delay(FADE_TIME / 1.5).fadeOut(FADE_TIME, after);
    };

    return Ticker;

  })();

  TickerTape = (function() {
    function TickerTape(game, options) {
      if (options == null) {
        options = {};
      }
      this.pixelsPerMiliSecond = options.pixelsPerMiliSecond || 1;
    }

    TickerTape.prototype.run = function() {};

    return TickerTape;

  })();

  Node.prototype.prependChild = function(elem) {
    if (this.firstChild != null) {
      return this.insertBefore(elem, this.firstChild);
    } else {
      return this.appendChild(elem);
    }
  };

  seconds = 1000;

  minutes = seconds * 60;

  hours = minutes * 60;

  days = hours * 24;

  weeks = days * 7;

  months = days * 30;

  years = days * 365;

  keyToStr = {
    37: 'left',
    39: 'right',
    38: 'up',
    40: 'down',
    13: 'enter',
    8: 'delete'
  };

  strToKey = {
    'left': 37,
    'right': 39,
    'up': 38,
    'down': 40,
    'enter': 13,
    'delete': 8
  };

  Node.prototype.setCSS3Attr = function(attr, val, isDoublyCSS) {
    var css3_kits, prefix, _i, _len, _results;
    if (isDoublyCSS == null) {
      isDoublyCSS = false;
    }
    css3_kits = ['webkit', 'Moz', 'O', 'ms', ''];
    _results = [];
    for (_i = 0, _len = css3_kits.length; _i < _len; _i++) {
      prefix = css3_kits[_i];
      _results.push(this.style[prefix + attr.capitalizeFirst()] = (isDoublyCSS ? "-" + prefix + "-" + val : val));
    }
    return _results;
  };

  String.prototype.capitalizeFirst = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  _ = (function() {
    function _() {}

    _.id = function(elemid) {
      return document.getElementById(elemid);
    };

    _.captureArrowKeys = function(fn) {
      return window.addEventListener('keyup', function(e) {
        if (e.keyCode in keyToStr) {
          return fn(keyToStr[e.keyCode]);
        }
      });
    };

    _.className = function(name) {
      return document.getElementsByClassName(name);
    };

    _.blockingSleep = function(ms) {
      var n, s, _results;
      s = new Date();
      _results = [];
      while (new Date() - s < ms) {
        _results.push(n = [0, 1, 2]);
      }
      return _results;
    };

    _.element = function(options) {
      var at, ch, cl, new_elem, oa, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      new_elem = document.createElement(options.type);
      if ('id' in options) {
        new_elem.id = options.id;
      }
      if ('attributes' in options) {
        _ref = options.attributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          at = _ref[_i];
          new_elem.setAttribute(at.name, at.value);
        }
      }
      if ('classList' in options) {
        _ref1 = options.classList;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          cl = _ref1[_j];
          new_elem.classList.add(cl);
        }
      }
      if ('children' in options) {
        _ref2 = options.children;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          ch = _ref2[_k];
          new_elem.appendChild(ch);
        }
      }
      if ('objectAttributes' in options) {
        _ref3 = options.objectAttributes;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          oa = _ref3[_l];
          new_elem[oa.name] = oa.value;
        }
      }
      if ('innerHTML' in options) {
        new_elem.innerHTML = options.innerHTML;
      }
      if ('parent' in options) {
        if (('prepend' in options) && options.prepend === true) {
          options.parent.prependChild(new_elem);
        } else {
          options.parent.appendChild(new_elem);
        }
      }
      return new_elem;
    };

    _.min = function(a, b, comp) {
      if (comp == null) {
        comp = function(a, b) {
          return a - b;
        };
      }
      if (comp(a, b) < 0) {
        return a;
      } else {
        return b;
      }
    };

    _.max = function(a, b, comp) {
      if (comp == null) {
        comp = function(a, b) {
          return a - b;
        };
      }
      if (comp(a, b) > 0) {
        return a;
      } else {
        return b;
      }
    };

    return _;

  })();

}).call(this);
