// Generated by CoffeeScript 1.6.3
(function() {
  var BT, ContainerView, DUR, Delegate, DurationInput, GameController, GraphView, IS_TESTING_GAME, LandingConrtoller, LeaderBoardView, MAX_YEARS, MarketSimulation, PlayerInfoHandler, PlayerSetupUI, SIM, SelectorView, StockOrder, TEST_DATA, TickerView, billion, days, hours, hundred, keyToStr, million, minutes, months, seconds, strToKey, thousand, weeks, years, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  GameController = (function() {
    function GameController() {}

    GameController.prototype.run = function(aux) {
      console.log(aux);
      this.aux = aux;
      this.players = aux.playerData.players;
      this.stocks = this.getStocksFromPlayers();
      this.buildUI();
      return this.startGame(aux.playerData.settings.duration, aux.playerData.settings.simulatedDuration);
    };

    GameController.prototype.buildUI = function() {
      this.containerView = new ContainerView(this, _.id('content'));
      this.graphView = new GraphView(this);
      this.containerView.addChild(this.graphView);
      this.leaderBoardView = new LeaderBoardView(this);
      this.containerView.addChild(this.leaderBoardView);
      this.tickerView = new TickerView(this);
      return document.body.appendChild(this.tickerView.getElement());
    };

    GameController.prototype.getStocksFromPlayers = function() {
      var d, o, p, stocks, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      stocks = {};
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _ref1 = p.orders;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          o = _ref1[_j];
          d = o.data;
          if (_ref2 = o.ticker, __indexOf.call(stocks, _ref2) < 0) {
            stocks[o.ticker] = {
              name: d.name,
              description: d.description,
              ticker: d.ticker_symbol,
              ppe: d.ppe,
              previous_close: d.previous_close,
              riskRating: d.riskRating
            };
          }
        }
      }
      return stocks;
    };

    GameController.prototype.signalEndSimulation = function() {
      clearInterval(this.interval);
      return alert('Simulation Ended! Thanks for playing');
    };

    GameController.prototype.pushDataToGraphView = function() {
      var completion, d, data, ticker;
      completion = this.getCompletion();
      refreshDuration(this.simulatedDuration * completion);
      d = (function() {
        var _ref, _results;
        _ref = this.stocks;
        _results = [];
        for (ticker in _ref) {
          data = _ref[ticker];
          _results.push({
            data: data,
            x: this.simulatedDuration * completion,
            y: this.marketSim.getHistory(ticker, completion)
          });
        }
        return _results;
      }).call(this);
      return this.graphView.updateData(d);
    };

    GameController.prototype.pushDataToTickerView = function() {
      var completion, d, data, ticker;
      completion = this.getCompletion();
      d = (function() {
        var _ref, _results;
        _ref = this.stocks;
        _results = [];
        for (ticker in _ref) {
          data = _ref[ticker];
          _results.push({
            ticker: ticker,
            move: (this.marketSim.getQuote(ticker, completion) - data.previous_close) / data.previous_close
          });
        }
        return _results;
      }).call(this);
      return this.tickerView.updateTicker(d);
    };

    GameController.prototype.pushDataToLeaderBoardView = function() {
      var completion, p, rowData, s, stockWorths, tableData, worth, _i, _len, _ref;
      rowData = [];
      completion = this.getCompletion();
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        stockWorths = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = p.orders;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            s = _ref1[_j];
            _results.push(s.quantity * this.marketSim.getQuote(s.ticker, completion));
          }
          return _results;
        }).call(this);
        worth = stockWorths.reduce((function(p, c) {
          return p + c;
        }), 0) + p.cash;
        rowData.push([p.name, "$" + (worth.toFixed(2)), p.orders.length]);
      }
      tableData = {
        headers: ['Name', 'Worth', 'Quantity Stocks'],
        rows: rowData
      };
      return this.leaderBoardView.update(tableData);
    };

    GameController.prototype.signalStepSimulation = function() {
      this.pushDataToGraphView();
      this.pushDataToTickerView();
      return this.pushDataToLeaderBoardView();
    };

    GameController.prototype.startGame = function(duration, simulatedDuration) {
      var _this;
      _this = this;
      this.simulatedDuration = simulatedDuration;
      this.duration = duration;
      this.start = new Date();
      setStartTimeForLabelRenderer(simulatedDuration);
      this.marketSim = new MarketSimulation(simulatedDuration, this.stocks);
      this.pushDataToGraphView();
      this.interval = setInterval((function() {
        return _this.signalStepSimulation();
      }), 1 * seconds);
      return setTimeout((function() {
        return _this.signalEndSimulation();
      }), duration);
    };

    GameController.prototype.getCompletion = function() {
      return (((new Date()).getTime()) - (this.start.getTime())) / this.duration;
    };

    return GameController;

  })();

  MAX_YEARS = 20;

  IS_TESTING_GAME = false;

  BT = {
    years: 1970.,
    months: 0.,
    days: 1.,
    hours: 0.,
    minutes: 0.,
    seconds: 0.,
    milliseconds: 0.
  };

  DUR = {
    years: BT.years + 0,
    months: BT.months + 0,
    days: BT.days + 0,
    hours: BT.hours + 0,
    minutes: BT.minutes + 1,
    seconds: BT.seconds + 0,
    milliseconds: BT.milliseconds + 0
  };

  SIM = {
    years: BT.years + 1,
    months: BT.months + 0,
    days: BT.days + 0,
    hours: BT.hours + 0,
    minutes: BT.minutes + 0,
    seconds: BT.seconds + 0,
    milliseconds: BT.milliseconds + 0
  };

  TEST_DATA = {
    players: [
      {
        cash: 10 * 1000,
        name: "Sam",
        orders: [
          {
            quantity: 10,
            ticker: "AAPL",
            data: {
              description: "Apple Inc.",
              label: "Apple",
              name: "Apple",
              ppe: 12,
              previous_close: 560,
              quantity: "3",
              riskRating: 70,
              ticker_symbol: "AAPL",
              value: "AAPL"
            },
            quantity: 3
          }, {
            quantity: 2,
            ticker: "SPOEK",
            data: {
              description: "S",
              label: "Spokeo",
              name: "Spokeo",
              ppe: 5,
              previous_close: 30,
              quantity: "2",
              riskRating: 40,
              ticker_symbol: "SPOEK",
              value: "SPOEK"
            }
          }
        ]
      }
    ],
    settings: {
      duration: Date.UTC(DUR.years, DUR.months, DUR.days, DUR.hours, DUR.minutes, DUR.seconds, DUR.milliseconds),
      simulatedDuration: Date.UTC(SIM.years, SIM.months, SIM.days, SIM.hours, SIM.minutes, SIM.seconds, SIM.milliseconds)
    }
  };

  LandingConrtoller = (function() {
    function LandingConrtoller() {}

    LandingConrtoller.prototype.run = function() {
      var _this;
      _this = this;
      return this.runIntro(function() {
        return _this.doPlayerSetup();
      });
    };

    LandingConrtoller.prototype.runIntro = function(after) {
      var FADE_TIME, PAUSETIME, intro;
      FADE_TIME = 1.2 * seconds;
      PAUSETIME = _.normalRandom(FADE_TIME, FADE_TIME * 0.8);
      intro = _.element({
        id: 'intro-logo',
        type: 'div',
        parent: document.body,
        children: [
          _.element({
            type: 'div',
            classList: ['spinner']
          }), _.element({
            type: 'h1',
            innerHTML: 'Ticker'
          })
        ],
        classList: ['hide']
      });
      return $(intro).fadeIn(FADE_TIME / 2).delay(PAUSETIME).fadeOut(FADE_TIME, after);
    };

    LandingConrtoller.prototype.doPlayerSetup = function() {
      return (new PlayerSetupUI(this.wrapper, this)).run();
    };

    return LandingConrtoller;

  })();

  PlayerSetupUI = (function() {
    function PlayerSetupUI(wrapper, controller) {
      this.wrapper = wrapper;
      this.controller = controller;
      this.players = [];
    }

    PlayerSetupUI.prototype.run = function() {
      if (IS_TESTING_GAME) {
        console.log("IS TESTING:::::::");
      }
      console.log({
        aux: {
          playerData: TEST_DATA
        }
      });
      if (IS_TESTING_GAME) {
        this.controller.delegate.toController('gameController', {
          aux: {
            playerData: TEST_DATA
          }
        });
      }
      if (IS_TESTING_GAME) {
        return;
      }
      this.settingsWrapper = this.getSettingsWrapper();
      this.playersWrapper = this.getPlayersWrapper();
      return this.innerWrapper = _.element({
        type: 'div',
        classList: ['inner-wrapper'],
        parent: this.wrapper,
        children: [this.getTitle('Settings'), this.settingsWrapper, this.getTitle('Players'), this.playersWrapper, this.getSubmit()]
      });
    };

    PlayerSetupUI.prototype.getTitle = function(text) {
      return _.element({
        type: 'h2',
        innerHTML: text
      });
    };

    PlayerSetupUI.prototype.getSubmit = function() {
      var submit, _this;
      submit = _.element({
        type: 'div',
        classList: ['button', 'transition', 'center', 'inline-block'],
        innerHTML: 'Start'
      });
      _this = this;
      submit.addEventListener('click', function() {
        return _this.playGame();
      });
      return submit;
    };

    PlayerSetupUI.prototype.getSettingsWrapper = function() {
      this.realDurationInput = new DurationInput('Simulated Duration', 'hms');
      this.simulatedDurationInput = new DurationInput('Simulated Duration', 'yMd');
      return _.element({
        type: 'div',
        id: 'settings-wrapper',
        children: [this.getSubHeader('Length of game for you', 'Duration of Simulation'), this.realDurationInput.getElem(), this.getSubHeader('Length of game for stocks', 'Simulated Duration'), this.simulatedDurationInput.getElem()]
      });
    };

    PlayerSetupUI.prototype.getSubHeader = function(text, hover) {
      if (hover == null) {
        hover = '';
      }
      return _.element({
        type: 'h5',
        innerHTML: text,
        attributes: [
          {
            name: 'title',
            value: hover
          }
        ]
      });
    };

    PlayerSetupUI.prototype.getPlayersWrapper = function() {
      var firstPlayer, handleTyped, _this;
      _this = this;
      handleTyped = function(e) {
        return _this.playerNameTyped(e, this, handleTyped);
      };
      firstPlayer = new PlayerInfoHandler(handleTyped, (function(e) {
        return _this.playerNameTypedCheckEmpty(e, this);
      }));
      this.players.push(firstPlayer);
      return _.element({
        type: 'div',
        id: 'player-wrapper',
        children: [firstPlayer.getElem()]
      });
    };

    PlayerSetupUI.prototype.playerNameTyped = function(e, caller, handler) {
      var handleTyped, newPlayer, _this;
      _this = this;
      caller.removeEventListener('keyup', handler);
      handleTyped = function(e) {
        return _this.playerNameTyped(e, this, handleTyped);
      };
      newPlayer = new PlayerInfoHandler(handleTyped, (function(e) {
        return _this.playerNameTypedCheckEmpty(e, this);
      }));
      this.players.push(newPlayer);
      return this.playersWrapper.appendChild(newPlayer.getElem());
    };

    PlayerSetupUI.prototype.playerNameTypedCheckEmpty = function(e) {
      if (e.keyCode in keyToStr && keyToStr[e.keyCode] === 'delete') {
        return console.log('delete');
      }
    };

    PlayerSetupUI.prototype.playGame = function() {
      var data, shouldPlay, status;
      status = {
        status: 'success',
        canPlay: true
      };
      data = this.reapAllData(status);
      if (!status.canPlay) {
        alert("" + status.status + "!");
      }
      if (!status.canPlay) {
        return;
      }
      shouldPlay = status.status !== 'success' ? confirm("" + status.status + ", are you sure you'd like to play?") : true;
      if (shouldPlay) {
        return this.controller.delegate.toController('gameController', {
          aux: {
            playerData: data
          }
        });
      }
    };

    PlayerSetupUI.prototype.reapAllData = function(status) {
      var data, p, _i, _len, _ref;
      data = {
        players: [],
        settings: {}
      };
      data.settings.duration = this.realDurationInput.value(status);
      data.settings.simulatedDuration = this.simulatedDurationInput.value(status);
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        data.players.push(p.reap(status));
      }
      data.players = data.players.filter(function(elem) {
        return (elem !== null && typeof elem.name) === 'string' && elem.name !== '';
      });
      if (data.players.length === 0 && status.status === 'success') {
        status.status = 'You don\'t have any players';
      }
      if (data.players.length === 0 && status.canPlay === true) {
        status.canPlay = false;
      }
      return data;
    };

    return PlayerSetupUI;

  })();

  DurationInput = (function() {
    function DurationInput(title, format) {
      var c;
      this.children = [];
      if ((format.search('y')) !== -1) {
        this.children.push({
          type: 'years',
          elem: this.rangeElem('years', 0, 365)
        });
      }
      if ((format.search('M')) !== -1) {
        this.children.push({
          type: 'months',
          elem: this.rangeElem('months', 0, 12)
        });
      }
      if ((format.search('d')) !== -1) {
        this.children.push({
          type: 'days',
          elem: this.rangeElem('days', 0, 31)
        });
      }
      if ((format.search('h')) !== -1) {
        this.children.push({
          type: 'hours',
          elem: this.rangeElem('hours', 0, 23)
        });
      }
      if ((format.search('m')) !== -1) {
        this.children.push({
          type: 'minutes',
          elem: this.rangeElem('minutes', 0, 59)
        });
      }
      if ((format.search('s')) !== -1) {
        this.children.push({
          type: 'seconds',
          elem: this.rangeElem('seconds', 0, 59)
        });
      }
      this.elem = _.element({
        type: 'div',
        classList: ['duration-input'],
        children: (function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(c.elem);
          }
          return _results;
        }).call(this)
      });
    }

    DurationInput.prototype.rangeElem = function(placeholder, min, max) {
      return _.element({
        type: 'input',
        attributes: [
          {
            name: 'type',
            value: 'number'
          }, {
            name: 'placeholder',
            value: placeholder
          }, {
            name: 'min',
            value: min
          }, {
            name: 'max',
            value: max
          }
        ]
      });
    };

    DurationInput.prototype.getElem = function() {
      return this.elem;
    };

    DurationInput.prototype.value = function(status) {
      var after, before, c, elements, _i, _len, _ref;
      elements = {
        years: BT.years,
        months: BT.months,
        days: BT.days,
        hours: BT.hours,
        minutes: BT.minutes,
        seconds: BT.seconds,
        milliseconds: BT.milliseconds
      };
      before = Date.UTC(elements.years, elements.months, elements.days, elements.hours, elements.minutes, elements.seconds, elements.milliseconds);
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        if (c && c.elem && c.type && c.elem.value && (c.type in elements) && (c.elem.value !== "")) {
          elements[c.type] += parseInt(c.elem.value);
        }
      }
      after = Date.UTC(elements.years, elements.months, elements.days, elements.hours, elements.minutes, elements.seconds, elements.milliseconds);
      if (before === after) {
        status.status = "Please fill in all of your dates!";
      }
      if (before === after) {
        status.canPlay = false;
      }
      return Date.UTC(elements.years, elements.months, elements.days, elements.hours, elements.minutes, elements.seconds, elements.milliseconds);
    };

    return DurationInput;

  })();

  PlayerInfoHandler = (function() {
    function PlayerInfoHandler(onKeyTyped, onDelete) {
      var PLAYER_INITIAL_CASH, _this;
      PLAYER_INITIAL_CASH = 10 * thousand;
      _this = this;
      this.onKeyTyped = onKeyTyped;
      this.onDelete = onDelete;
      this.initialCash = PLAYER_INITIAL_CASH;
      this.cash = this.initialCash;
      this.orders = [];
    }

    PlayerInfoHandler.prototype.getElem = function() {
      return _.element({
        type: 'div',
        classList: ['player-option-wrapper'],
        children: [this.getPlayerNameElem(), this.getOrderWrapper()]
      });
    };

    PlayerInfoHandler.prototype.getPlayerNameElem = function() {
      var playerInfo, _this;
      _this = this;
      this.available_funds_label = _.element({
        type: 'span',
        classList: ['cash-available-label']
      });
      this.playerName = _.element({
        type: 'input',
        attributes: [
          {
            name: 'type',
            value: 'text'
          }, {
            name: 'placeholder',
            value: 'Player Name'
          }
        ]
      });
      playerInfo = _.element({
        type: 'div',
        children: [this.playerName, this.available_funds_label]
      });
      this.updateCashAvailable();
      playerInfo.addEventListener('keyup', _this.onKeyTyped);
      playerInfo.addEventListener('keyup', _this.onDelete);
      return playerInfo;
    };

    PlayerInfoHandler.prototype.addNewOrderWrapperAfterSearch = function() {
      var new_stock_order, _this;
      _this = this;
      new_stock_order = new StockOrder(_this, (function() {
        return _this.addNewOrderWrapperAfterSearch();
      }));
      _this.orders.push(new_stock_order);
      return _this.orderWrapper.appendChild(new_stock_order.getElem());
    };

    PlayerInfoHandler.prototype.getOrderWrapper = function() {
      var new_stock_order, _this;
      _this = this;
      new_stock_order = new StockOrder(this, (function() {
        return _this.addNewOrderWrapperAfterSearch();
      }));
      this.orders.push(new_stock_order);
      return this.orderWrapper = _.element({
        type: 'div',
        classList: ['order-wrapper'],
        children: [new_stock_order.getElem()]
      });
    };

    PlayerInfoHandler.prototype.update = function() {
      var order, subtract_cash, _i, _len, _ref;
      subtract_cash = 0;
      _ref = this.orders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        order = _ref[_i];
        subtract_cash += order.getCost();
      }
      this.cash = this.initialCash - subtract_cash;
      return this.updateCashAvailable();
    };

    PlayerInfoHandler.prototype.getCashAvailable = function() {
      return this.cash;
    };

    PlayerInfoHandler.prototype.updateCashAvailable = function() {
      var overspent;
      this.available_funds_label.innerHTML = "$" + (this.cash.toFixed(2));
      overspent = this.cash < 0;
      this.available_funds_label.classList.add(overspent ? 'over' : 'under');
      return this.available_funds_label.classList.remove(overspent ? 'under' : 'over');
    };

    PlayerInfoHandler.prototype.reap = function(status) {
      var name, o, orders;
      this.update();
      name = this.playerName.value;
      if (this.cash < 0) {
        alert("" + name + " spent " + (Math.abs(this.cash)) + " more than the " + this.initialCash + " available");
      }
      orders = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.orders;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          o = _ref[_i];
          _results.push(o.reap());
        }
        return _results;
      }).call(this)).filter((function(elem) {
        return elem !== null;
      }));
      if (this.cash < 0 || orders.length === 0) {
        if ((name && name !== '') && (orders.length === 0)) {
          status.status = "" + name + " does not have any orders";
        } else if (((!name) || (name === '')) && orders.length !== 0) {
          status.status = 'One of your players doesn\'t have a name';
        }
        return null;
      } else {
        return {
          name: name,
          orders: orders,
          cash: this.cash
        };
      }
    };

    return PlayerInfoHandler;

  })();

  StockOrder = (function() {
    function StockOrder(ih, onSearched) {
      this.infoHandler = ih;
      this.onSearched = onSearched;
    }

    StockOrder.prototype.getElem = function() {
      var handler, wrp, _this;
      _this = this;
      this.order = _.element({
        type: 'input',
        attributes: [
          {
            name: 'type',
            value: 'text'
          }, {
            name: 'placeholder',
            value: 'Search for a company'
          }
        ]
      });
      this.quantity = _.element({
        type: 'input',
        attributes: [
          {
            name: 'type',
            value: 'number'
          }, {
            name: 'placeholder',
            value: 'order quantity'
          }, {
            name: 'min',
            value: 0
          }, {
            name: 'step',
            value: 1
          }
        ]
      });
      handler = function() {
        return _this.quantityChange(handler);
      };
      this.quantity.addEventListener('change', handler);
      wrp = _.element({
        type: 'div',
        children: [this.order, this.quantity, this.updateStatisticsWrapper({})]
      });
      $(this.order).autocomplete({
        source: '/stockAutoComplete',
        select: function(event, ui) {
          return _this.autocompleteChange(event, ui);
        }
      });
      return wrp;
    };

    StockOrder.prototype.updateStatisticsWrapper = function(data) {
      var c, cols, head_cols, r, rows, value_cols, _i, _len;
      cols = [
        {
          header: 'Name',
          value: data.name || "-"
        }, {
          header: 'Ticker',
          value: data.ticker_symbol || "-"
        }, {
          header: 'Yesterday\'s Close',
          value: data.previous_close ? "" + data.previous_close + " USD" : "-"
        }, {
          header: 'Projected Cost',
          value: data.quantity && data.previous_close ? "" + (data.quantity * data.previous_close) + " USD" : "-"
        }, {
          header: 'P/E',
          value: data.ppe || "-"
        }, {
          header: 'Rating',
          value: (data.riskRating / 100) || "-"
        }
      ];
      head_cols = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = cols.length; _i < _len; _i++) {
          c = cols[_i];
          _results.push(_.element({
            type: 'td',
            innerHTML: c.header
          }));
        }
        return _results;
      })();
      value_cols = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = cols.length; _i < _len; _i++) {
          c = cols[_i];
          _results.push(_.element({
            type: 'td',
            innerHTML: c.value
          }));
        }
        return _results;
      })();
      rows = [
        _.element({
          type: 'tr',
          children: head_cols
        }), _.element({
          type: 'tr',
          children: value_cols
        })
      ];
      if (this.statisticsWrapper) {
        this.statisticsWrapper.innerHTML = "";
        this.statisticsWrapper.title = data.description || "no description available";
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          r = rows[_i];
          this.statisticsWrapper.appendChild(r);
        }
      } else {
        this.statisticsWrapper = _.element({
          type: 'table',
          children: rows,
          classList: ['summary-table']
        });
      }
      return this.statisticsWrapper;
    };

    StockOrder.prototype.autocompleteChange = function(event, ui) {
      this.data = ui.item;
      this.data.quantity = this.quantity.value;
      this.updateStatisticsWrapper(this.data);
      if (this.onSearched) {
        this.onSearched();
        return this.onSearched = void 0;
      }
    };

    StockOrder.prototype.quantityChange = function() {
      if (this.data) {
        this.data.quantity = this.quantity.value;
        this.updateStatisticsWrapper(this.data);
      }
      return this.infoHandler.update();
    };

    StockOrder.prototype.getCost = function() {
      if (this.data) {
        return this.quantity.value * this.data.previous_close;
      } else {
        return 0;
      }
    };

    StockOrder.prototype.reap = function() {
      if ((this.order && this.data && this.order.value === this.data.ticker_symbol) && (this.quantity && this.quantity.value && this.quantity.value > 0)) {
        return {
          ticker: this.order.value,
          quantity: Math.floor(this.quantity.value),
          data: this.data
        };
      } else {
        return null;
      }
    };

    return StockOrder;

  })();

  document.body.onload = function() {
    var landingConrtoller;
    landingConrtoller = new LandingConrtoller();
    return (new Delegate({
      "default": landingConrtoller,
      landingConrtoller: landingConrtoller,
      gameController: new GameController()
    }, _.id("content"))).run();
  };

  Delegate = (function() {
    function Delegate(controllerTable, wrapper) {
      var k, v;
      if (!controllerTable) {
        alert("Delegate must be initialized with controllerTable, see docs for more info");
      }
      this.controllerTable = controllerTable;
      this.wrapper = wrapper ? wrapper : document.body;
      for (k in controllerTable) {
        v = controllerTable[k];
        v.delegate = this;
        v.wrapper = wrapper;
      }
    }

    Delegate.prototype.run = function() {
      return this.controllerTable["default"].run(this.wrapper);
    };

    Delegate.prototype.toController = function(controllerName, options, withWrapper) {
      if (options == null) {
        options = {};
      }
      if (withWrapper == null) {
        withWrapper = this.wrapper;
      }
      withWrapper.innerHTML = '';
      return this.controllerTable[controllerName].run(('aux' in options ? options.aux : {}));
    };

    Delegate.prototype.getModel = function(modelName) {
      if (this.models && modelName in this.models) {
        return this.models[modelName];
      }
    };

    return Delegate;

  })();

  Node.prototype.prependChild = function(elem) {
    if (this.firstChild != null) {
      return this.insertBefore(elem, this.firstChild);
    } else {
      return this.appendChild(elem);
    }
  };

  Date.prototype.format = function(str) {
    var date, dayLong, dayShort, dyLong, dyShort, hourShort, monthLong, monthShort, msLong, msShort, yearShort, yearlong;
    msLong = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    msShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    dyLong = ['Sunday', 'Monday', 'Tuesday', 'Wednsday', 'Thursday', 'Friday', 'Saturday'];
    dyShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thr', 'Fri', 'Sat'];
    yearlong = new RegExp("%YYYY");
    yearShort = new RegExp("%YY");
    monthLong = new RegExp("%MM");
    monthShort = new RegExp("%M");
    date = new RegExp("%D");
    dayLong = new RegExp("%dd");
    dayShort = new RegExp("%d");
    hourShort = new RegExp("%h");
    if (str.match(yearlong)) {
      str = str.replace(yearlong, this.getFullYear());
    }
    if (str.match(yearShort)) {
      str = str.replace(yearShort, (this.getFullYear()) % 100);
    }
    if (str.match(monthLong)) {
      str = str.replace(monthLong, msLong[this.getMonth()]);
    }
    if (str.match(monthShort)) {
      str = str.replace(monthShort, msShort[this.getMonth()]);
    }
    if (str.match(date)) {
      str = str.replace(date, this.getDate());
    }
    if (str.match(dayLong)) {
      str = str.replace(dayLong, dyLong[this.getDay()]);
    }
    if (str.match(dayShort)) {
      str = str.replace(dayShort, dyShort[this.getDay()]);
    }
    return str = str.replace(hourShort, "" + (((this.getHours()) % 12) + 1) + (this.getHour / 2 ? 'pm' : 'am'));
  };

  seconds = 1000;

  minutes = seconds * 60;

  hours = minutes * 60;

  days = hours * 24;

  weeks = days * 7;

  months = days * 30;

  years = days * 365;

  hundred = 100;

  thousand = 1000;

  million = thousand * thousand;

  billion = thousand * million;

  keyToStr = {
    37: 'left',
    39: 'right',
    38: 'up',
    40: 'down',
    13: 'enter',
    8: 'delete'
  };

  strToKey = {
    'left': 37,
    'right': 39,
    'up': 38,
    'down': 40,
    'enter': 13,
    'delete': 8
  };

  Node.prototype.setCSS3Attr = function(attr, val, isDoublyCSS) {
    var css3_kits, prefix, _i, _len, _results;
    if (isDoublyCSS == null) {
      isDoublyCSS = false;
    }
    css3_kits = ['webkit', 'Moz', 'O', 'ms', ''];
    _results = [];
    for (_i = 0, _len = css3_kits.length; _i < _len; _i++) {
      prefix = css3_kits[_i];
      _results.push(this.style[prefix + attr.capitalizeFirst()] = (isDoublyCSS ? "-" + prefix + "-" + val : val));
    }
    return _results;
  };

  String.prototype.capitalizeFirst = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  _ = (function() {
    function _() {}

    _.id = function(elemid) {
      return document.getElementById(elemid);
    };

    _.captureArrowKeys = function(fn) {
      return window.addEventListener('keyup', function(e) {
        if (e.keyCode in keyToStr) {
          return fn(keyToStr[e.keyCode]);
        }
      });
    };

    _.className = function(name) {
      return document.getElementsByClassName(name);
    };

    _.blockingSleep = function(ms) {
      var n, s, _results;
      s = new Date();
      _results = [];
      while (new Date() - s < ms) {
        _results.push(n = [0, 1, 2]);
      }
      return _results;
    };

    _.element = function(options) {
      var at, ch, cl, new_elem, oa, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      new_elem = document.createElement(options.type);
      if ('id' in options) {
        new_elem.id = options.id;
      }
      if ('attributes' in options) {
        _ref = options.attributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          at = _ref[_i];
          new_elem.setAttribute(at.name, at.value);
        }
      }
      if ('classList' in options) {
        _ref1 = options.classList;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          cl = _ref1[_j];
          new_elem.classList.add(cl);
        }
      }
      if ('children' in options) {
        _ref2 = options.children;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          ch = _ref2[_k];
          new_elem.appendChild(ch);
        }
      }
      if ('objectAttributes' in options) {
        _ref3 = options.objectAttributes;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          oa = _ref3[_l];
          new_elem[oa.name] = oa.value;
        }
      }
      if ('innerHTML' in options) {
        new_elem.innerHTML = options.innerHTML;
      }
      if ('parent' in options) {
        if (('prepend' in options) && options.prepend === true) {
          options.parent.prependChild(new_elem);
        } else {
          options.parent.appendChild(new_elem);
        }
      }
      return new_elem;
    };

    _.min = function(a, b, comp) {
      if (comp == null) {
        comp = function(a, b) {
          return a - b;
        };
      }
      if (comp(a, b) < 0) {
        return a;
      } else {
        return b;
      }
    };

    _.max = function(a, b, comp) {
      if (comp == null) {
        comp = function(a, b) {
          return a - b;
        };
      }
      if (comp(a, b) > 0) {
        return a;
      } else {
        return b;
      }
    };

    _.uniformWithProbability = function(probability) {
      return Math.random() < probability;
    };

    _.randomFromRange = function(floor, ceil) {
      return this.scale(Math.random(), floor, ceil);
    };

    _.normalRandom = function(mean, std) {
      var c, rad, x, y;
      if (mean == null) {
        mean = 0;
      }
      if (std == null) {
        std = 1;
      }
      while (true) {
        x = 2 * Math.random() - 1;
        y = 2 * Math.random() - 1;
        rad = x * x + y * y;
        if (!((rad >= 1) || (rad === 0))) {
          break;
        }
      }
      c = Math.sqrt(-2 * Math.log(rad) / rad);
      return mean + (std * (x * c));
    };

    _.normalizeFloat = function(num, floor, ceil) {
      return (num - floor) / (ceil - floor);
    };

    _.scale = function(num, floor, ceil) {
      return num * (ceil - floor) + floor;
    };

    return _;

  })();

  MarketSimulation = (function() {
    var AVG_INFLATION, AVG_PPE, AVG_RISK, DATA_POINTS, INFLATION_WEIGHT, PROBABILITY_OF_REVERSAL, STD_RISK;

    AVG_INFLATION = 0.022;

    AVG_RISK = 0.004;

    STD_RISK = 0.001;

    DATA_POINTS = 4000;

    AVG_PPE = 20;

    PROBABILITY_OF_REVERSAL = 0.01;

    INFLATION_WEIGHT = 0.3;

    function MarketSimulation(simulatedDuration, stocks, period) {
      var data, ticker, _ref;
      this.simulatedDuration = simulatedDuration;
      this.period = period ? period : this.getPeriod();
      this.stocks = stocks;
      this.market = this.simulateMarket();
      _ref = this.stocks;
      for (ticker in _ref) {
        data = _ref[ticker];
        this.simulateStock(data);
      }
    }

    MarketSimulation.prototype.simulateMarket = function() {
      var avg, bias, i, last, market, period_weight, risk, _i;
      market = [];
      risk = _.normalRandom(AVG_RISK, STD_RISK);
      last = _.normalRandom(AVG_INFLATION, risk);
      bias = 0;
      period_weight = this.period / (1 * weeks);
      for (i = _i = 0; 0 <= DATA_POINTS ? _i < DATA_POINTS : _i > DATA_POINTS; i = 0 <= DATA_POINTS ? ++_i : --_i) {
        avg = (last + bias) * (1 - INFLATION_WEIGHT) + INFLATION_WEIGHT * AVG_INFLATION;
        last = _.normalRandom(avg, risk);
        bias -= _.normalRandom(bias * (1 - period_weight) * .05, STD_RISK);
        if (_.uniformWithProbability(PROBABILITY_OF_REVERSAL * period_weight)) {
          bias *= -1;
        }
        risk = Math.abs(risk + _.normalRandom(0, STD_RISK));
        market.push(last);
      }
      return market;
    };

    MarketSimulation.prototype.simulateStock = function(s) {
      var earnings, history, i, last, market_weight, r, rate, startValue, time, _i;
      startValue = s.previous_close;
      history = [];
      last = startValue;
      rate = (20 / s.ppe) * AVG_INFLATION;
      earnings = s.previous_close / s.ppe;
      market_weight = s.riskRating / 100 * 0.1;
      time = this.period / years;
      for (i = _i = 0; 0 <= DATA_POINTS ? _i < DATA_POINTS : _i > DATA_POINTS; i = 0 <= DATA_POINTS ? ++_i : --_i) {
        r = (1 - market_weight) * rate + market_weight * this.market[i];
        rate = _.normalRandom(r, s.riskRating / 500);
        last = last * Math.pow(Math.E, time * rate);
        history.push(last);
      }
      return s.history = history;
    };

    MarketSimulation.prototype.getHistory = function(ticker, complete) {
      var hist, sub;
      if (complete == null) {
        complete = 1;
      }
      hist = this.stocks[ticker].history.slice(0);
      if (complete > 0.25) {
        hist = hist.filter(function(v, i, a) {
          return i % 2;
        });
      }
      if (complete > 0.5) {
        hist = hist.filter(function(v, i, a) {
          return i % 2;
        });
      }
      if (ticker in this.stocks) {
        sub = hist.splice(0, Math.ceil((hist.length - 1) * complete));
      }
      return sub;
    };

    MarketSimulation.prototype.getQuote = function(ticker, complete) {
      var hist, index;
      if (complete == null) {
        complete = 1;
      }
      if (!this.stocks[ticker]) {
        return;
      }
      hist = this.stocks[ticker].history;
      index = Math.ceil((hist.length - 1) * complete);
      if ((ticker in this.stocks) && (index < hist.length)) {
        return hist[index];
      }
    };

    MarketSimulation.prototype.getSimulatedDuration = function() {
      return this.simulatedDuration;
    };

    MarketSimulation.prototype.getPeriod = function() {
      return this.simulatedDuration / DATA_POINTS;
    };

    MarketSimulation.prototype.getDataPoints = function() {
      return DATA_POINTS;
    };

    return MarketSimulation;

  })();

  ContainerView = (function() {
    function ContainerView(controller, wrapper) {
      this.controller = controller;
      this.wrapper = wrapper;
      this.build();
    }

    ContainerView.prototype.build = function() {
      this.wrapper.innerHTML = '';
      return this.body = _.element({
        type: 'div',
        classList: ['inner-wrapper'],
        parent: this.wrapper
      });
    };

    ContainerView.prototype.addChild = function(child) {
      return this.body.appendChild(child.getElement());
    };

    return ContainerView;

  })();

  GraphView = (function() {
    function GraphView(controller) {
      this.controller = controller;
      this.selector = new SelectorView(this);
      this.graphHolder = _.element({
        type: 'div'
      });
      this.frame = _.element({
        type: 'div',
        id: 'graph-view-frame',
        children: [this.selector.getElement(), this.graphHolder]
      });
    }

    GraphView.prototype.getElement = function() {
      return this.frame;
    };

    GraphView.prototype.selectionClicked = function(selection) {
      return this.displayData(selection.data);
    };

    GraphView.prototype.displayData = function(data) {
      this.graphHolder.innerHTML = '';
      this.options = {
        data: {
          x: data.x,
          y: data.y
        }
      };
      this.graph = new Aristochart(this.graphHolder, this.options, Aristochart.themes.ticker);
      this.graph.update();
      return this.graph.refreshBounds();
    };

    GraphView.prototype.updateData = function(data) {
      var d, tickers;
      tickers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          d = data[_i];
          _results.push({
            label: d.data.ticker,
            data: d
          });
        }
        return _results;
      })();
      return this.selector.refresh(tickers);
    };

    return GraphView;

  })();

  LeaderBoardView = (function() {
    function LeaderBoardView(controller) {
      this.controller = controller;
      this.table = _.element({
        type: 'table',
        classList: ['tablesorter']
      });
      this.thead = _.element({
        type: 'thead',
        parent: this.table
      });
      this.tbody = _.element({
        type: 'tbody',
        parent: this.table
      });
    }

    LeaderBoardView.prototype.getElement = function() {
      return this.table;
    };

    LeaderBoardView.prototype.update = function(data) {
      var c, h, headrow, r, _i, _len, _ref;
      this.thead.innerHTML = '';
      this.tbody.innerHTML = '';
      headrow = _.element({
        type: 'tr',
        parent: this.thead,
        children: (function() {
          var _i, _len, _ref, _results;
          _ref = data.headers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            h = _ref[_i];
            _results.push(_.element({
              type: 'th',
              innerHTML: h
            }));
          }
          return _results;
        })()
      });
      _ref = data.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        _.element({
          type: 'tr',
          parent: this.tbody,
          children: (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = r.length; _j < _len1; _j++) {
              c = r[_j];
              _results.push(_.element({
                type: 'td',
                innerHTML: c
              }));
            }
            return _results;
          })()
        });
      }
      if (!this.didInit) {
        $(this.table).tablesorter({
          sortList: [[1, 0]]
        });
      }
      return this.didInit = true;
    };

    return LeaderBoardView;

  })();

  SelectorView = (function() {
    function SelectorView(controller) {
      this.class_identifier = 'selector-view';
      this.controller = controller;
      this.selectionElem = _.element({
        type: 'div',
        classList: ["" + this.class_identifier + "-container"]
      });
    }

    SelectorView.prototype.getElement = function() {
      return this.selectionElem;
    };

    SelectorView.prototype.selectElement = function(element) {
      var e, selection, _i, _len, _ref;
      selection = element.selection;
      if (e !== element) {
        _ref = this.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          e.classList.remove('selected');
        }
      }
      element.classList.add('selected');
      this.selectedIndex = element.selectionIndex;
      return this.controller.selectionClicked(selection);
    };

    SelectorView.prototype.refresh = function(selections) {
      var e, i, s, _i, _ref, _this;
      _this = this;
      this.selectionElem.innerHTML = '';
      this.elements = [];
      for (i = _i = 0, _ref = selections.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        s = selections[i];
        e = _.element({
          type: 'div',
          classList: ["" + this.class_identifier + "-selection", 'transition'],
          innerHTML: s.label
        });
        e.selection = s;
        e.selectionIndex = i;
        e.addEventListener('click', (function() {
          return _this.selectElement(this);
        }));
        this.selectionElem.appendChild(e);
        this.elements.push(e);
      }
      if (this.selectedIndex && this.selectedIndex < this.elements.length) {
        return this.selectElement(this.elements[this.selectedIndex]);
      } else if (this.elements.length > 0) {
        return this.selectElement(this.elements[0]);
      }
    };

    return SelectorView;

  })();

  TickerView = (function() {
    function TickerView(controller) {
      this.controller = controller;
      this.container = _.element({
        type: 'ticker'
      });
      this.tape = _.element({
        type: 'tape',
        parent: this.container
      });
      this.tape.l = 0;
      this.tape.style.left = "" + this.tape.l + "px";
      this.quotes = {};
      this.fps = seconds / 30;
      this.animate();
    }

    TickerView.prototype.getElement = function() {
      return this.container;
    };

    TickerView.prototype.move = function() {
      this.tape.l = this.tape.l > -this.tape.clientWidth ? this.tape.l - 4 : document.body.clientWidth;
      return this.tape.style.left = "" + this.tape.l + "px";
    };

    TickerView.prototype.animate = function() {
      var _this;
      _this = this;
      return setInterval((function() {
        return _this.move();
      }), this.fps);
    };

    TickerView.prototype.refreshChange = function() {
      var q, t, _ref, _results;
      _ref = this.quotes;
      _results = [];
      for (t in _ref) {
        q = _ref[t];
        if (q.move > 0) {
          q.elem.classList.add('up');
          _results.push(q.elem.classList.remove('down'));
        } else {
          q.elem.classList.add('down');
          _results.push(q.elem.classList.remove('up'));
        }
      }
      return _results;
    };

    TickerView.prototype.updateTicker = function(data) {
      var changeElem, d, nameElem, new_quote_elem, _i, _len;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        d = data[_i];
        if (d.ticker in this.quotes) {
          this.quotes[d.ticker].move = d.move;
        } else {
          new_quote_elem = _.element({
            type: 'quote',
            parent: this.tape
          });
          nameElem = _.element({
            type: 'name',
            innerHTML: d.ticker,
            parent: new_quote_elem
          });
          changeElem = _.element({
            type: 'change',
            parent: new_quote_elem
          });
          this.quotes[d.ticker] = {
            move: d.move,
            elem: new_quote_elem,
            nameElem: nameElem,
            changeElem: changeElem
          };
        }
        this.quotes[d.ticker].changeElem.innerHTML = (d.move * 100).toFixed(2);
      }
      return this.refreshChange();
    };

    return TickerView;

  })();

}).call(this);
